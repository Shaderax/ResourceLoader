# detect target platform
if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
	set( TARGET_PLATFORM "PLATFORM_LINUX" CACHE INTERNAL "" FORCE )

elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Android")
	set( TARGET_PLATFORM "PLATFORM_ANDROID" CACHE INTERNAL "" FORCE )

elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
	set( TARGET_PLATFORM "PLATFORM_MACOS" CACHE INTERNAL "" FORCE )

elseif (${CMAKE_SYSTEM_NAME} STREQUAL "iOS")
	set( TARGET_PLATFORM "PLATFORM_IPHONE" CACHE INTERNAL "" FORCE )

elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
	set( TARGET_PLATFORM "PLATFORM_WINDOWS" CACHE INTERNAL "" FORCE )

elseif (${CMAKE_SYSTEM_NAME} STREQUAL "WindowsCE")
	set( TARGET_PLATFORM "PLATFORM_WINDOWSCE" CACHE INTERNAL "" FORCE )

elseif (${CMAKE_SYSTEM_NAME} STREQUAL "WindowsStore")
	set( TARGET_PLATFORM "PLATFORM_WINDOWS_UWP" CACHE INTERNAL "" FORCE )

elseif (${CMAKE_SYSTEM_NAME} STREQUAL "WindowsPhone")
	set( TARGET_PLATFORM "PLATFORM_WINDOWS_PHONE" CACHE INTERNAL "" FORCE )

elseif (${CMAKE_SYSTEM_NAME} STREQUAL "QNX")
	set( TARGET_PLATFORM "PLATFORM_QNX" CACHE INTERNAL "" FORCE )
else ()
	message( FATAL_ERROR "unsupported platform ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_VERSION}" )
endif ()

message( STATUS "TARGET_PLATFORM: ${TARGET_PLATFORM}" )

#==================================================================================================
# Visual Studio Compilation settings
#==================================================================================================
# Project Template
set( COMPILER_MSVC OFF )
string( FIND "${CMAKE_CXX_COMPILER_ID}" "MSVC" outPos )
if ( (outPos GREATER -1) )
	set( COMPILER_MSVC ON )
endif()
if ( COMPILER_MSVC )
	set( DETECTED_COMPILER "COMPILER_MSVC" )
	message( STATUS "CMAKE_C_FLAGS: ${CMAKE_C_FLAGS}" )
	message( STATUS "CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}" )
	message( STATUS "CMAKE_EXE_LINKER_FLAGS: ${CMAKE_EXE_LINKER_FLAGS}" )
	message( STATUS "CMAKE_STATIC_LINKER_FLAGS: ${CMAKE_STATIC_LINKER_FLAGS}" )
	message( STATUS "CMAKE_SHARED_LINKER_FLAGS: ${CMAKE_SHARED_LINKER_FLAGS}" )

	set( CMAKE_CONFIGURATION_TYPES Release Debug )
	set( CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIGURATION_TYPES}" CACHE STRING "Configurations" FORCE )
	
	# Release
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Release>: > )
	set( CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS} /D_NDEBUG /DNDEBUG  /MD /Ox /MP " CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} /D_NDEBUG /DNDEBUG /MD /Ox /MP" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS} /LTCG /RELEASE " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CMAKE_STATIC_LINKER_FLAGS} /LTCG /RELEASE " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS} /LTCG /RELEASE " CACHE STRING "" FORCE )
	set( PRJ_TEMPLATE_CXX_FLAGS_RELEASE /std:c++latest /Ob2 /Oi /Ot /Oy /GT /GL /GF /GS- /MD /W3 /Ox /analyze- /MP /Zc:inline /Gy- /fp:strict /fp:except- /DCOMPILER_MSVC "/D${TARGET_PLATFORM}" "/DWINDOWS_TARGET_VERSION=${WINDOWS_TARGET_VERSION}" "/DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "/DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "/DPLATFORM_BITS=${PLATFORM_BITS}" CACHE INTERNAL "" FORCE )
	set( PRJ_TEMPLATE_LINKER_FLAGS_RELEASE " /OPT:REF /OPT:ICF /INCREMENTAL:NO /LTCG /RELEASE DYNAMICBASE" CACHE INTERNAL "" FORCE )

	# Debug
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Debug>: > )
	set( CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS} /D_DEBUG /D_ITERATOR_DEBUG_LEVEL=1 /MDd /Od /MP " CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} /D_DEBUG /D_ITERATOR_DEBUG_LEVEL=1 /MDd /Od /Zi /MP" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS} /DEBUG:FULL " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CMAKE_STATIC_LINKER_FLAGS} /DEBUG:FULL " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS} /DEBUG:FULL " CACHE STRING "" FORCE )
	set( PRJ_TEMPLATE_CXX_FLAGS_DEBUG  /std:c++latest /MP /MDd /GF- /GS /GR /Zc:inline /Gy- /fp:strict /fp:except- /W4 /WX- /sdl /Od /Ob0 /Oy- /Zi /analyze- /JMC /RTCsu /DCOMPILER_MSVC "/D${TARGET_PLATFORM}" "/DWINDOWS_TARGET_VERSION=${WINDOWS_TARGET_VERSION}" "/DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "/DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "/DPLATFORM_BITS=${PLATFORM_BITS}" CACHE INTERNAL "" FORCE )
	set( PRJ_TEMPLATE_LINKER_FLAGS_DEBUG " /OPT:REF /OPT:ICF /INCREMENTAL:NO /DEBUG:FULL" CACHE INTERNAL "" FORCE )
	set( CMAKE_BUILD_TYPE "Debug")
endif()


#==================================================================================================
# GCC Compilation settings
#==================================================================================================
set( COMPILER_GCC OFF )
string( FIND "${CMAKE_CXX_COMPILER_ID}" "GNU" outPos )
if ( (outPos GREATER -1) )
	set( COMPILER_GCC ON )
endif()
if ( COMPILER_GCC )
	set( DETECTED_COMPILER "COMPILER_GCC" )
	set(ENV{LSAN_OPTIONS} "verbosity=1:log_threads=1")
	message($ENV{LSAN_OPTIONS})
	#--------------------------------------------
	message( STATUS "CMAKE_C_FLAGS: ${CMAKE_C_FLAGS}" )
	message( STATUS "CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}" )
	message( STATUS "CMAKE_EXE_LINKER_FLAGS: ${CMAKE_EXE_LINKER_FLAGS}" )
	message( STATUS "CMAKE_STATIC_LINKER_FLAGS: ${CMAKE_STATIC_LINKER_FLAGS}" )
	message( STATUS "CMAKE_SHARED_LINKER_FLAGS: ${CMAKE_SHARED_LINKER_FLAGS}" )
	set( CMAKE_CONFIGURATION_TYPES Release Debug )
	set( CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIGURATION_TYPES}" CACHE STRING "Configurations" FORCE )
	
	# Release
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Release>: > )
	set( CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS} -D_NDEBUG -DNDEBUG  -O3 -finline-functions -Wno-undef -Wno-switch  " CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O3 -finline-functions -Wno-undef -Wno-switch " CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CMAKE_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )

	set( PRJ_TEMPLATE_CXX_FLAGS_RELEASE -DCOMPILER_GCC -Wall "-D${TARGET_PLATFORM}" "-DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "-DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "-DPLATFORM_BITS=${PLATFORM_BITS}" -O3 -Ofast CACHE INTERNAL "" FORCE )
	set( PRJ_TEMPLATE_LINKER_FLAGS_RELEASE "" CACHE INTERNAL "" FORCE )

	# Debug
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Debug>: > )
	set( CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS} -D_DEBUG -Og -Wno-undef -Wno-switch" CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} -D_DEBUG -Og -Wno-undef -Wno-switch " CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CMAKE_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )

	set( PRJ_TEMPLATE_CXX_FLAGS_DEBUG  -DCOMPILER_GCC -Wall "-D${TARGET_PLATFORM}" "-DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "-DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "-DPLATFORM_BITS=${PLATFORM_BITS}" -ggdb -Og CACHE INTERNAL "" FORCE )
	set( PRJ_TEMPLATE_LINKER_FLAGS_DEBUG "" CACHE INTERNAL "" FORCE )

	set( CMAKE_BUILD_TYPE "Debug")
endif()



#==================================================================================================
# Clang Compilation settings
#==================================================================================================
set( COMPILER_CLANG OFF )
string( FIND "${CMAKE_CXX_COMPILER_ID}" "Clang" outPos )
if ( (outPos GREATER -1) AND (WIN32 OR UNIX) )
	set( COMPILER_CLANG ON )
endif()
if ( COMPILER_CLANG )
	set( DETECTED_COMPILER "COMPILER_CLANG" )
	#--------------------------------------------
	message( STATUS "CMAKE_C_FLAGS: ${CMAKE_C_FLAGS}" )
	message( STATUS "CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}" )
	message( STATUS "CMAKE_EXE_LINKER_FLAGS: ${CMAKE_EXE_LINKER_FLAGS}" )
	message( STATUS "CMAKE_STATIC_LINKER_FLAGS: ${CMAKE_STATIC_LINKER_FLAGS}" )
	message( STATUS "CMAKE_SHARED_LINKER_FLAGS: ${CMAKE_SHARED_LINKER_FLAGS}" )
	set( CMAKE_CONFIGURATION_TYPES Release Debug )
	set( CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIGURATION_TYPES}" CACHE STRING "Configurations" FORCE )
	
	# Release
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Release>: > )
	set( CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS} -D_NDEBUG -DNDEBUG -O3 -finline-functions -Wno-undef -Wno-switch -Wno-c++11-narrowing -Wno-unused  " CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} -D_NDEBUG -DNDEBUG -O3 -finline-functions -Wno-undef -Wno-switch -Wno-c++11-narrowing -Wno-unused " CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CMAKE_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )

	set( PRJ_TEMPLATE_CXX_FLAGS_RELEASE  -DCOMPILER_CLANG -Wall "-D${TARGET_PLATFORM}" "-DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "-DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "-DPLATFORM_BITS=${PLATFORM_BITS}" -O3 -Ofast -fomit-frame-pointer -finline-functions CACHE INTERNAL "" FORCE )
	set( PRJ_TEMPLATE_LINKER_FLAGS_RELEASE "" CACHE INTERNAL "" FORCE )

	# Debug
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Debug>: > )
	set( CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS} -D_DEBUG -Og -Wno-undef -Wno-switch  " CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} -D_DEBUG -Og -Wno-undef -Wno-switch -D${TARGET_PLATFORM} " CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CMAKE_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )

	set( PRJ_TEMPLATE_CXX_FLAGS_DEBUG  -std=c++20 -Wall -DCOMPILER_CLANG "-D${TARGET_PLATFORM}" "-DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "-DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "-DPLATFORM_BITS=${PLATFORM_BITS}" -g3 -Og CACHE INTERNAL "" FORCE )
	set( PRJ_TEMPLATE_LINKER_FLAGS_DEBUG "" CACHE INTERNAL "" FORCE )

	set( CMAKE_BUILD_TYPE "Debug")
endif()



#==================================================================================================
# Clang Compilation settings
#==================================================================================================
set( COMPILER_CLANG_APPLE OFF )
string( FIND "${CMAKE_CXX_COMPILER_ID}" "Clang" outPos )
if ( (outPos GREATER -1) AND (APPLE) )
	set( COMPILER_CLANG_APPLE ON )
endif()
if ( COMPILER_CLANG_APPLE )
	set( DETECTED_COMPILER "COMPILER_CLANG_APPLE" )
	#--------------------------------------------
	set( CONFIGURATION_DEPENDENT_PATH ON CACHE INTERNAL "" FORCE )
	#--------------------------------------------
	message( STATUS "CMAKE_C_FLAGS: ${CMAKE_C_FLAGS}" )
	message( STATUS "CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}" )
	message( STATUS "CMAKE_EXE_LINKER_FLAGS: ${CMAKE_EXE_LINKER_FLAGS}" )
	message( STATUS "CMAKE_STATIC_LINKER_FLAGS: ${CMAKE_STATIC_LINKER_FLAGS}" )
	message( STATUS "CMAKE_SHARED_LINKER_FLAGS: ${CMAKE_SHARED_LINKER_FLAGS}" )
	set( CMAKE_CONFIGURATION_TYPES Release Debug )
	set( CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIGURATION_TYPES}" CACHE STRING "Configurations" FORCE )
	
	# Release
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Release>: > )
	set( CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS} -D_NDEBUG -DNDEBUG  -O3 -finline-functions -Wno-undef -Wno-switch -Wno-c++11-narrowing -Wno-unused  " CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O3 -finline-functions -Wno-undef -Wno-switch -Wno-c++11-narrowing -Wno-unused  " CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CMAKE_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )

	set( PRJ_TEMPLATE_CXX_FLAGS_RELEASE  -DCOMPILER_CLANG "-D${TARGET_PLATFORM}" "-DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "-DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "-DPLATFORM_BITS=${PLATFORM_BITS}" -O3 -Ofast -fomit-frame-pointer -finline-functions CACHE INTERNAL "" FORCE )
	set( PRJ_TEMPLATE_LINKER_FLAGS_RELEASE "" CACHE INTERNAL "" FORCE )

	# Debug
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Debug>: > )
	set( CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS} -D_DEBUG -Og -Wno-undef -Wno-switch -Wno-c++11-narrowing -Wno-unused  " CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} -D_DEBUG -Og -Wno-undef -Wno-switch -Wno-c++11-narrowing -Wno-unused -D${TARGET_PLATFORM} " CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CMAKE_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )

	set( PRJ_TEMPLATE_CXX_FLAGS_DEBUG  -DCOMPILER_CLANG "-D${TARGET_PLATFORM}" "-DPLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "-DPLATFORM_CPU_NAME=\"${CMAKE_SYSTEM_PROCESSOR}\"" "-DPLATFORM_BITS=${PLATFORM_BITS}"  -g3 -Og CACHE INTERNAL "" FORCE )
	set( PRJ_TEMPLATE_LINKER_FLAGS_DEBUG "" CACHE INTERNAL "" FORCE )

	set( CMAKE_BUILD_TYPE "Debug")
endif()

if ( NOT DEFINED DETECTED_COMPILER )
	message( FATAL_ERROR "current compiler: '${CMAKE_CXX_COMPILER_ID}' is not configured for this project!" )
endif()

message( STATUS "Debug mode flags for cpp: " ${CMAKE_CXX_FLAGS_DEBUG})
message( STATUS "Release mode flags for cpp: " ${CMAKE_CXX_FLAGS_RELEASE})